# Local environment variables
# Used by docker-compose and it can be loaded
# by calling load_local_env_vars() from src/util/local.py
#
# To override values for your own personal local development
# create an override.env file in the same directory.
# Any environment variables defined in that file will
# take precedence over those defined here.
#
# See /docs/app/README.md for further details

ENVIRONMENT=local
PORT=3000

# Python path needs to be specified
# for pytest to find the implementation code
PYTHONPATH=/app/

# PY_RUN_APPROACH=python OR docker
# Set this in your environment
# to modify how the Makefile runs
# commands that can run in or out
# of the Docker container - defaults to outside

############################
# Logging
############################

# Can be "human-readable" OR "json"
LOG_FORMAT=human-readable

# Set log level. Valid values are DEBUG, INFO, WARNING, CRITICAL
# LOG_LEVEL=INFO

# Enable/disable audit logging. Valid values are TRUE, FALSE
LOG_ENABLE_AUDIT=FALSE

# Change the message length for the human readable formatter
# LOG_HUMAN_READABLE_FORMATTER__MESSAGE_WIDTH=50

############################
# Authentication
############################
# The auth token used by the local endpoints
API_AUTH_TOKEN=LOCAL_AUTH_12345678

############################
# DB Environment Variables
############################

# Set DB_HOST to localhost if accessing a non-dockerized database
DB_HOST=app-db
DB_NAME=app
DB_USER=app
DB_SCHEMA=public
DB_PASSWORD=secret123
DB_SSL_MODE=allow

# When an error occurs with a SQL query,
# whether or not to hide the parameters which
# could contain sensitive information.
HIDE_SQL_PARAMETER_LOGS=TRUE

############################
# AWS Defaults
############################
# For these secret access keys, don't
# add them to this file to avoid mistakenly
# committing them. Set these in your shell
# by doing `export AWS_ACCESS_KEY_ID=whatever`
# if you are running the app directly, or
# in your `override.env` if you are running the
# app in a Docker container
AWS_ACCESS_KEY_ID=DO_NOT_SET_HERE
AWS_SECRET_ACCESS_KEY=DO_NOT_SET_HERE

# These next two are commented out as we
# don't have configuration for individuals
# to use these at the moment and boto3
# tries to use them first before the keys above.
#AWS_SECURITY_TOKEN=DO_NOT_SET_HERE
#AWS_SESSION_TOKEN=DO_NOT_SET_HERE

AWS_DEFAULT_REGION=us-east-1

############################
# OPENAI API Key
############################
OPENAI_API_KEY=DO_NOT_SET_HERE

# Don't send telemetry to Haystack
HAYSTACK_TELEMETRY_ENABLED=False

# HAYHOOKS_SHOW_TRACEBACKS is useful for development
HAYHOOKS_SHOW_TRACEBACKS=true

# For debugging, send otel data immediately (not in batches)
BATCH_OTEL=false

PHOENIX_COLLECTOR_ENDPOINT=http://phoenix:6006
PHOENIX_PROJECT_NAME=local-docker-project

# Enables Haystack to connect to Phoenix via SSL
# To connect to the AWS Lightsail Phoenix:
#   Need to add the intermediate CA certificate for TLS/SSL verification of our Phoenix instance
#   Export the "Amazon RSA 2048 M04" intermediate certificate using a browser pointed at
#   the Phoenix instance. The first certificate below is the Amazon cert.
# To connect to a local Docker instance of Phoenix:
#   Create the CA certificate as instructed in the README.md
#   Append the self-signed root CA certificate to the INTERMEDIATE_CACERT value.
#   This is the second certificate below.
INTERMEDIATE_CACERT="-----BEGIN CERTIFICATE-----
MIIEXjCCA0agAwIBAgITB3MSTyqVLj7Rili9uF0bwM5fJzANBgkqhkiG9w0BAQsF
ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
b24gUm9vdCBDQSAxMB4XDTIyMDgyMzIyMjYzNVoXDTMwMDgyMzIyMjYzNVowPDEL
MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEcMBoGA1UEAxMTQW1hem9uIFJT
QSAyMDQ4IE0wNDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM3pVR6A
lQOp4xe776FdePXyejgA38mYx1ou9/jrpV6Sfn+/oqBKgwhY6ePsQHHQayWBJdBn
v4Wz363qRI4XUh9swBFJ11TnZ3LqOMvHmWq2+loA0QPtOfXdJ2fHBLrBrngtJ/GB
0p5olAVYrSZgvQGP16Rf8ddtNyxEEhYm3HuhmNi+vSeAq1tLYJPAvRCXonTpWdSD
xY6hvdmxlqTYi82AtBXSfpGQ58HHM0hw0C6aQakghrwWi5fGslLOqzpimNMIsT7c
qa0GJx6JfKqJqmQQNplO2h8n9ZsFJgBowof01ppdoLAWg6caMOM0om/VILKaa30F
9W/r8Qjah7ltGVkCAwEAAaOCAVowggFWMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYD
VR0PAQH/BAQDAgGGMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNV
HQ4EFgQUH1KSYVaCVH+BZtgdPQqqMlyH3QgwHwYDVR0jBBgwFoAUhBjMhTTsvAyU
lC4IWZzHshBOCggwewYIKwYBBQUHAQEEbzBtMC8GCCsGAQUFBzABhiNodHRwOi8v
b2NzcC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbTA6BggrBgEFBQcwAoYuaHR0cDov
L2NydC5yb290Y2ExLmFtYXpvbnRydXN0LmNvbS9yb290Y2ExLmNlcjA/BgNVHR8E
ODA2MDSgMqAwhi5odHRwOi8vY3JsLnJvb3RjYTEuYW1hem9udHJ1c3QuY29tL3Jv
b3RjYTEuY3JsMBMGA1UdIAQMMAowCAYGZ4EMAQIBMA0GCSqGSIb3DQEBCwUAA4IB
AQA+1O5UsAaNuW3lHzJtpNGwBnZd9QEYFtxpiAnIaV4qApnGS9OCw5ZPwie7YSlD
ZF5yyFPsFhUC2Q9uJHY/CRV1b5hIiGH0+6+w5PgKiY1MWuWT8VAaJjFxvuhM7a/e
fN2TIw1Wd6WCl6YRisunjQOrSP+unqC8A540JNyZ1JOE3jVqat3OZBGgMvihdj2w
Y23EpwesrKiQzkHzmvSH67PVW4ycbPy08HVZnBxZ5NrlGG9bwXR3fNTaz+c+Ej6c
5AnwI3qkOFgSkg3Y75cdFz6pO/olK+e3AqygAcv0WjzmkDPuBjssuZjCHMC56oH3
GJkV29Di2j5prHJbwZjG1inU
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFnTCCA4WgAwIBAgIUGarWedDv8x0zE0T/+PgAzPj3SvYwDQYJKoZIhvcNAQEL
BQAwXjELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFRlc3QxDTALBgNVBAcMBFRlc3Qx
ETAPBgNVBAoMCE15Um9vdENBMQswCQYDVQQLDAJJVDERMA8GA1UEAwwITXlSb290
Q0EwHhcNMjUwODA1MjEwMjA0WhcNMzUwODAzMjEwMjA0WjBeMQswCQYDVQQGEwJV
UzENMAsGA1UECAwEVGVzdDENMAsGA1UEBwwEVGVzdDERMA8GA1UECgwITXlSb290
Q0ExCzAJBgNVBAsMAklUMREwDwYDVQQDDAhNeVJvb3RDQTCCAiIwDQYJKoZIhvcN
AQEBBQADggIPADCCAgoCggIBALdIsqQP9J8HmTqFTKiYS/M2tyqdC2u+yitndBCJ
bXAQUZEIOshgKytQG2RUyijxpvmIekm6+3Emj+fYpdmMNW6Ms5u5wty06lIGOKwD
qQM+Bjo7PLZscd1Zgh/JmV2XBopS5twImtOE2rtRJclsFZ9Nr8lCH9Gs8wXQUAbS
p98EzbFZyrvvYQAeGLKSVndyCVj0py/ouox9Mb1blUgvSgcF8AF7OD3qdNDXyhJI
ejuaCEkFDmN2s2aGWnoalP2hmsPbJWYqvn7PoydqWoWpECPUlTU4419drr4BGQWC
HoKgxsrGKEh7PrRh6A6Koz6Pa/38n2UUDJft3OiP6EsKBiss/sJe2E+NelcPCNzc
bSUAuT7WqFJpIiJ1yuuYz5fkTFOX2kqIS9ZkqbKLEgpK6GqUjkBcMq/u89IiIH/y
0ZgIZqCBqpIzpAE9Coh0xKLufeKUumRlzjJwXRk4ajlzvK5+KMfXa8EygWIpIXB0
kMXE0Kf5kYweD2f9MDnjZJwygvQ0J37INTjlmXDdxEzWGxoOjR+UoPmpMNXKf++A
TVvhq6JqWqexSPqj5dzqJuC9tdWTDnCSUwXpTWiRGkVbezVfAGsH7ONUzy/nztZK
NLjqzGjKfccjYDeHk1i4tziutw/iEfcLVIlsU28JMMZt07UxMn3ygJFiVmELVcGL
Pc8nAgMBAAGjUzBRMB0GA1UdDgQWBBQXZfv7U4XBlSvBu+TXYvrOkDzVFjAfBgNV
HSMEGDAWgBQXZfv7U4XBlSvBu+TXYvrOkDzVFjAPBgNVHRMBAf8EBTADAQH/MA0G
CSqGSIb3DQEBCwUAA4ICAQAzATV0qzrcRiURzd2vrpsDA9lnI8xONVcUkKgF8S1O
lCU4fj/YYFgmg+SFskOuWDX9OAMhlLWpA8JJj3ObiKv33Jhnh3Gngb2CIEeos1gr
iKvjsCJHT0bTwVpEmPZrvZJ/Q8PKJBAXaNJIwC/xVfTWiV2naz/7Zh0QMyBBD5zL
ExC2lzFbw5SZdITl95mAwiD4+4qdb6vCH5S7PjFGzlYu+3tNXLQ4ZdUJC5x7Oq4L
YJjzuJBp01T8pf3mYZDpMC+ErOi6xije6uY6Fk5Q16/FB+e/wvRnN3826uZ/X9Mc
8fkIAPXsSPHhVJX7MlqdUBmMza7KLVb69n4jFkI+GyIu8h4UrrSGGRMgD6rM40CA
wxPoCtUyT5hsjgFbSI0Wo2D3TEzgffQp7Zk3C36fIxCDjPxRzSrEn2PdxSVreUSk
crffOG+2XZT2x1mVMtNNZIHYvdU0bXbF7S9Ut+nFZUxdPaU1dp/QaY3hwd4KvO20
ogXTul/7TeQdOWg7R720CJ6P7S4R4Z2wmJgFMOhxqGeQnn5j00nLtoz+91JKAleO
SBk4oTThQjb2+y5FOCYLgNAPgZo4DSNoDyR2MD8w7jNDutbzYT4Nc1PHTBA1FlRl
0/WIMn/SqAY8mNgHa0lx3rRVFQWFKQbvDTBTgEAkH1nYMQuYFkh+pBHWqzKgJZrg
Fg==
-----END CERTIFICATE-----"
